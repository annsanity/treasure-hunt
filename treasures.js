const gridSize=10,grid=[];let gameStage="setup",positionOfPlayer=null,treasures={5:0,6:0,7:0,8:0},score=0,rounds=0;for(let e=0;e<gridSize;e++)grid[e]=new Array(gridSize).fill(null);const gameBoard=document.getElementById("game-board"),endSetupBtn=document.getElementById("end-setup-btn"),endPlayBtn=document.getElementById("end-play-btn");function createGameBoard(){gameBoard.innerHTML="";for(let t=0;t<gridSize;t++){var a=gameBoard.insertRow();for(let e=0;e<gridSize;e++){var r=a.insertCell();r.setAttribute("row",t),r.setAttribute("col",e),"setup"===gameStage&&r.addEventListener("click",placeObject)}}}function placeObject(){var e,t,a,r;"setup"===gameStage&&(e=this,t=parseInt(e.getAttribute("row")),a=parseInt(e.getAttribute("col")),isNaN(t)||isNaN(a)?(valid,alert("Invalid cell!")):(r=prompt('Enter a value (5-8 for treasure, "o" for obstacle, "h" for hunter)'),null!==grid[t][a]?alert("Cell already occupied!"):5<=r&&r<=8?(grid[t][a]=parseInt(r),e.textContent=r,e.classList.add("treasure"),treasures[r]++):"o"===r?(grid[t][a]="obstacle",e.textContent="O",e.classList.add("obstacle")):"h"===r?positionOfPlayer?alert("Hunter already placed!"):(grid[t][a]="hunter",e.textContent="H",e.classList.add("hunter"),positionOfPlayer={row:t,col:a}):alert("Invalid input!")))}function createStatusDisplay(){var e=document.createElement("div");e.id="status-container",e.innerHTML=`
    <p>Rounds: <span id="rounds">0</span></p>
    <p>Treasures left:</p>
    <ul>
      <li>Value 5: <span id="treasures-5">0</span></li>
      <li>Value 6: <span id="treasures-6">0</span></li>
      <li>Value 7: <span id="treasures-7">0</span></li>
      <li>Value 8: <span id="treasures-8">0</span></li>
    </ul>
    <p>Score: <span id="score">0</span></p>
  `,document.body.appendChild(e)}function updateStatusDisplay(){var e=document.getElementById("rounds"),t=document.getElementById("score"),a={5:document.getElementById("treasures-5"),6:document.getElementById("treasures-6"),7:document.getElementById("treasures-7"),8:document.getElementById("treasures-8")};e.textContent=rounds;for(const r in treasures)a[r].textContent=treasures[r];t.textContent=score}function enterPlayStage(){document.addEventListener("keydown",handleKeyPress)}function playerMovement(e){var t,a=positionOfPlayer.row,r=positionOfPlayer.col;let n=a,o=r;switch(e){case"a":o=r-1;break;case"d":o=r+1;break;case"w":n=a-1;break;case"s":n=a+1;break;default:return void alert('Invalid direction! Please use "a", "d", "w", or "s".')}n<0||n>=gridSize||o<0||o>=gridSize||"obstacle"===grid[n][o]?alert("Cannot move to that position!"):(e=gameBoard.rows[a].cells[r],t=gameBoard.rows[n].cells[o],e.classList.remove("hunter"),e.textContent="",t.classList.add("hunter"),t.textContent="H",grid[a][r]=null,"number"==typeof grid[n][o]&&(console.log("Treasure found at",n,o),e=grid[n][o],score+=e,treasures[e]--,t.classList.remove("treasure"),grid[n][o]="hunter",placeRandomObstacle()),console.log("line 188"),grid[n][o]="hunter",positionOfPlayer={row:n,col:o},console.log("Hunter moved to",n,o),rounds++,updateStatusDisplay(),checkPlayStageEnd())}function placeRandomObstacle(){var e,t,a,r=[];for(let t=0;t<gridSize;t++)for(let e=0;e<gridSize;e++)null===grid[t][e]&&r.push({row:t,col:e});0!==r.length&&({row:e,col:t}=r[Math.floor(Math.random()*r.length)],(a=gameBoard.rows[e].cells[t]).textContent="O",a.classList.add("obstacle"),grid[e][t]="obstacle",console.log("Obstacle placed at",e,t))}function checkPlayStageEnd(){let e=0;for(const t in treasures)e+=treasures[t];if(0===e)endPlayStage();else{let e,t,a,r;e=0<positionOfPlayer.row&&"obstacle"!==grid[positionOfPlayer.row-1][positionOfPlayer.col],t=positionOfPlayer.row<gridSize-1&&"obstacle"!==grid[positionOfPlayer.row+1][positionOfPlayer.col],a=0<positionOfPlayer.col&&"obstacle"!==grid[positionOfPlayer.row][positionOfPlayer.col-1],r=positionOfPlayer.col<gridSize-1&&"obstacle"!==grid[positionOfPlayer.row][positionOfPlayer.col+1],e||t||a||r||endPlayStage()}}function endPlayStage(){gameStage="end",endPlayBtn.disabled=!0,calculatePerformanceIndex()}function calculatePerformanceIndex(){var e=0<rounds?(score/rounds).toFixed(2):0;console.log("Performance Index: ${performanceIndex}"),alert("Game is Over! Performance Index: "+e)}function handleKeyPress(e){"play"===gameStage&&playerMovement(e.key.toLowerCase())}endSetupBtn.addEventListener("click",()=>{null===positionOfPlayer?alert("Please place the hunter first!"):(createStatusDisplay(),updateStatusDisplay(),gameStage="play",endSetupBtn.disabled=!0,endPlayBtn.disabled=!1,checkPlayStageEnd(),enterPlayStage())}),endPlayBtn.addEventListener("click",()=>{positionOfPlayer?endPlayStage():alert("Please place the hunter first!")}),createGameBoard();
